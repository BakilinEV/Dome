
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			Объект.АдресПоставки = ПолучитьАдресПоставки(Объект);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//Вставить содержимое обработчика
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ВспомогательныеФункции

&НаСервереБезКонтекста
Функция НайтиНоменклатуруПоКоду(КодПоиска)
	
	Возврат Справочники.Номенклатура.НайтиПоКоду(КодПоиска);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПереченьНоменклатуры(Номенклатура, НаДату)
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Номенклатура.ЭтоЮралс Тогда
		
		НачДата = НачалоКвартала(НаДату);
		
		Если Не РегистрыСведений.ЗаявкаПереченьОферт.Выбрать(НачДата, НачДата).Следующий() Тогда
			Результат = РегистрыСведений.ЗаявкаПереченьОферт.ЗагрузитьДанныеОферт(НачДата);
			Если Не ПустаяСтрока(Результат) Тогда 
				//Сообщить("Присвоен перечень 1, т.к. при загрузке данных оферт возникла ошибка:"+Символы.ПС+Результат);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ?(РегистрыСведений.ЗаявкаПереченьОферт.Выбрать(НачДата, НачДата, Новый Структура("Номенклатура", Номенклатура)).Следующий(), 2, 1);
		
	КонецЕсли;
	
	Возврат 3;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает цену номенклатуры по перечню в виде записи, списком, таблицей
Функция ПолучитьЦенуНоменклатуры(Номенклатура, НаДату, Перечень, Вид="Запись")
	
	Если Не ЗначениеЗаполнено(Номенклатура) Или Перечень=0 Тогда
		СтруктураВозврата = Новый Структура("Цена, Контрагент", 0, Неопределено);
		Если Вид = "Список" Тогда 
			Список = Новый СписокЗначений;
			Список.Добавить(СтруктураВозврата, ?(Номенклатура.Пустая(), "НЕ ВЫБРАНА НОМЕНКЛАТУРА", "НЕ УКАЗАН ПЕРЕЧЕНЬ"));
			Возврат Список;
		ИначеЕсли Вид = "Запись" Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Если Перечень = 1 Тогда
		
		Параметры = Новый Структура("Номенклатура", Номенклатура);
		Результат = РегистрыСведений.ЗаявкаПереченьОферт.ПолучитьДанныеAPI(, "LASTPRICE", Параметры);
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			Сообщить("Ошибка получения данных Юралс: "+Результат);
			Результат = Новый ТаблицаЗначений;
			Результат.Колонки.Добавить("Цена");
		КонецЕсли;
		
		Результат.Колонки.Добавить("Контрагент");
		Результат.ЗаполнитьЗначения("ЮРАЛС", "Контрагент");
		
	Иначе
		
		Если Перечень = 2 Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗаявкиПереченьОферт.Номенклатура,
			|	ЗаявкиПереченьОферт.ЦенаБезНДС КАК Цена,
			|	ЗаявкиПереченьОферт.КонтрагентНаименование КАК Контрагент
			|ИЗ
			|	РегистрСведений.ЗаявкиПереченьОферт КАК ЗаявкиПереченьОферт
			|ГДЕ
			|	ЗаявкиПереченьОферт.Период = &Период
			|	И ЗаявкиПереченьОферт.Номенклатура В(&Номенклатура)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Цена"
			);
			
			Запрос.УстановитьПараметр("Период", НачалоКвартала(НаДату));
			
		ИначеЕсли Перечень = 3 Тогда
			
			Склад = БухгалтерскийУчетПереопределяемый.ЗначениеПоУмолчаниюПользователя("ОсновнойСклад");
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 5
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
			|	МАКСИМУМ(ХозрасчетныйОборотыДтКт.Период) КАК Период,
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотДт = 0
			|			ТОГДА ХозрасчетныйОборотыДтКт.СуммаНУОборотДт
			|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СуммаНУОборотДт / ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК Цена,
			|	ХозрасчетныйОборотыДтКт.СубконтоКт1.Наименование КАК Контрагент
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			,
			|			,
			|			Регистратор,
			|			СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы)),
			|			,
			|			СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)),
			|			,
			|			СубконтоДт1 В (&Номенклатура)
			|				И ВЫБОР
			|					КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ СубконтоДт3 = &Склад
			|				КОНЕЦ) КАК ХозрасчетныйОборотыДтКт
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
			|	ХозрасчетныйОборотыДтКт.СубконтоКт1.Наименование,
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотДт = 0
			|			ТОГДА ХозрасчетныйОборотыДтКт.СуммаНУОборотДт
			|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СуммаНУОборотДт / ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК ЧИСЛО(15, 2))
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ"
			);
			
			Запрос.УстановитьПараметр("Склад", Склад);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если Вид = "Запись" Тогда
		
		Возврат ?(Результат.Количество()>0, Результат[0], Новый Структура("Цена, Контрагент", 0, Неопределено));
		
	ИначеЕсли Вид = "Список" Тогда
		
		Список = Новый СписокЗначений;
		
		Если Результат.Количество()=0 Тогда
			Список.Добавить(0, "НЕ НАЙДЕНА ЦЕНА");
		Иначе
			Для Каждого СтрокаТаблицы Из Результат Цикл
				Список.Добавить(СтрокаТаблицы.Цена, ""+Формат(СтрокаТаблицы.Цена, "ЧДЦ=2")+" - "+СтрокаТаблицы.Контрагент+?(Перечень=3, Формат(СтрокаТаблицы.Период, "ДФ=' [dd.MM.yy]'"), ""));
			КонецЦикла;
		КонецЕсли;
		
		Возврат Список;
		
	ИначеЕсли Вид = "Таблица" Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ВспомогательныеФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы="Товары")
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы="Товары")
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	КоличествоСтрок = Элементы.Товары.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрок = ВставитьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	//ПараметрыОбъекта = Неопределено;
	//ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	//ДобавленныеСтроки = РеализацияТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтотОбъект, ВыбранноеЗначение, ИмяТаблицы);
	//
	//СписокСчетов = Новый Массив;
	//Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНаОплатуПокупателю) Тогда
	//		СписокСчетов.Добавить(СтрокаТаблицы.СчетНаОплатуПокупателю);
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетов, "Номер, Дата");
	//
	//Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
	//	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, РеквизитыСчетовНаОплату, ПараметрыОбъекта);
	//КонецЦикла;
	//
	//ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(ДобавленныеСтроки.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетМаркируемойПродукцииИСМП);
	//
	//РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
	//
	//РеализацияТоваровУслугФормы.ПриДобавленииСчетов(ЭтотОбъект, СписокСчетов);
	//
	//ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // КопированиеВставкаСтрокЧерезБуферОбмена

#Область ФункцииСтатусаДокумента

// Определяет текущий статус документа
// 
// Возвращаемое значение:
//  Справочник.СтатусыЗаявки - значение статуса документа.
//
&НаСервере
Функция ТекущийСтатус()
	
	ТекущийСтатус = РегистрыСведений.ЗаявкаСтатусы.ПолучитьСтатус(Объект.Ссылка);
	
	Если ТекущийСтатус.Пустая() Тогда
		ТекущийСтатус = Справочники.СтатусыЗаявки.ПолучитьСтатусНачало();
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

&НаСервере
Функция УстановитьСледующийСтатус()
	
	Возврат РегистрыСведений.ЗаявкаСтатусы.УстановитьСтатус(Объект.Ссылка, ТекущийСтатус().Следующий);
	
КонецФункции

&НаСервере
Функция ЕстьДоступСтатуса(ТекущийСтатус=Неопределено) Экспорт
	
	Если ТекущийСтатус = Неопределено Тогда
		ТекущийСтатус = ТекущийСтатус();
	КонецЕсли;
	
	Возврат Справочники.СтатусыЗаявки.ПроверитьДоступСтатуса(ТекущийСтатус, Пользователи.ТекущийПользователь(), Объект.Ответственный);
	
КонецФункции

// Определяет, согласован ли документ
// 
// Возвращаемое значение:
//  Булево - значение функциональной опции.
//
&НаСервере
Функция ДокументСогласован() Экспорт 

	ТекущийСтатус = ТекущийСтатус();
	
	Если Не ТекущийСтатус.Следующий.Пустая() Или ТекущийСтатус = Справочники.СтатусыЗаявки.ПолучитьСтатусОтмена() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ДокументСогласован()

#КонецОбласти // Статус

#Область ОсновнаяКнопка

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	
	Вопрос = "Перед сменой статуса необходимо записать документ. Записать?";
	Записать();
	
	Если УстановитьСледующийСтатус() Тогда
		УстановитьСвойстваКнопкиСтатуса();
		//Закрыть();
	КонецЕсли;
		
	//УстановитьВидимостьДоступность();
	//ЭтаФорма.Обновить();
	
КонецПроцедуры

// Процедура устанавливает надпись для кнопки СОГЛАСОВАТЬ в зависимости от стутуса документа
&НаКлиенте
Процедура УстановитьСвойстваКнопкиСтатуса()
	
	ТекущийСтатус = ТекущийСтатус();
	
	Кнопка = Элементы.ФормаИзменитьСтатус;
	Кнопка.Заголовок = ТекущийСтатус; //?(ПустаяСтрока(ТекущийСтатус.Заголовок), ТекущийСтатус, ТекущийСтатус.Заголовок);
	//Кнопка.Доступность = Не ПустаяСтрока(ТекущийСтатус.Заголовок) И ЕстьДоступСтатуса(ТекущийСтатус) И ЕстьДоступСтатуса(ТекущийСтатус.Следующий);
	
КонецПроцедуры // УстановитьСвойстваОсновнойКнопки()

#КонецОбласти //ОсновнаяКнопка

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары
	
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не Элементы.ТоварыКоличествоЗаявлено.ТолькоПросмотр Тогда
		ТекущиеДанные.КоличествоЗаявлено = ТекущиеДанные.Количество;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураКодПриИзменении(Элемент)
	
	НайденныйЭлемент = НайтиНоменклатуруПоКоду(СокрЛП(Элемент.Значение));
	
	Если НайденныйЭлемент.ПометкаУдаления Тогда
		Сообщить("Элемент помечен на удаление!"+Символы.ПС+"Введите другой код");
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = НайденныйЭлемент;
	ПриИзмененииНоменклатурыТовары();
		
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область АдресПоставки

&НаСервереБезКонтекста
Функция ПолучитьАдресПоставки(Параметры, ТолькоПервый=Истина)
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки КАК Представление,
	|	СУММА(1) КАК Приоритет,
	|	1 КАК Порядок
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.Организация = &Организация
	|	И Заявка.Ссылка <> &Ссылка
	|	И Заявка.АдресПоставки <> """"
	|	И Заявка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&АдресПоставки,
	|	""────────────────────────────────────────"",
	|	0,
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки,
	|	СУММА(1),
	|	3
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.Организация = &Организация
	|	И Заявка.Ссылка <> &Ссылка
	|	И Заявка.АдресПоставки <> """"
	|	И Заявка.Ответственный <> &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Приоритет УБЫВ"
	);
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Ответственный", Параметры.Ответственный);
	Запрос.УстановитьПараметр("АдресПоставки", Параметры.АдресПоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТолькоПервый Тогда
			Если Выборка.Приоритет = 2 Тогда
				Выборка.Следующий();
			КонецЕсли;
			Возврат Выборка.АдресПоставки;
		Иначе
			Список.Добавить(Выборка.АдресПоставки, Выборка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура АдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, Объект.АдресПоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПоставкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура("Ссылка,Организация,Ответственный,АдресПоставки", Объект.Ссылка, Объект.Организация, Объект.Ответственный, Объект.АдресПоставки);
	
	Элемент.СписокВыбора = ПолучитьАдресПоставки(СтруктураПараметров, Ложь);
	
КонецПроцедуры

#КонецОбласти // АдресПоставки

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродолжение

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииНоменклатурыТовары()

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти.ПереченьЗакупа = 0;
		Возврат;
	КонецЕсли;
	
	Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения;
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.Артикул) Тогда
		СтрокаТабличнойЧасти.Артикул = ПолучитьКаталожныйНомер(Номенклатура);
	КонецЕсли;
	
	//Если мКолонкиТовары.Цена.Видимость
	// Или мКолонкиТовары.Сумма.Видимость
	// Или мКолонкиТовары.Контрагент.Видимость
	// Или мКолонкиТовары.ПереченьЗакупа.Видимость
	//Тогда
	//	СтрокаТабличнойЧасти.ПереченьЗакупа = ПолучитьПереченьНоменклатуры(Номенклатура);
	//	ЦеныКонтрагентов = ПолучитьЦенуНоменклатуры(Номенклатура, СтрокаТабличнойЧасти.ПереченьЗакупа, "Запись");
	//	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЦеныКонтрагентов);
	//	
	//	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

#Область ВспомогательныеПоискаПоКаталожномуНомеру

// Функция проверяет наличие в строке цифр
//
// Параметры
//  СтрокаПроверки - Строка для проверки наличия цифр
// Возвращаемое значение:
//   Булево
//
Функция ВСтрокеЕстьЦифры(Знач СтрокаПроверки)
	
	Для й = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, й, 1));
		Если (48 <= КодСимвола И КодСимвола <= 57) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ВСтрокеЕстьЦифры

Функция ПолучитьКаталожныйНомер(Номенклатура, Списком=Ложь)
	
	Если Списком Тогда
		Список = Новый СписокЗначений;
	ИначеЕсли Номенклатура.СтатьяЗатрат.Код <> "2.4.1" Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Номенклатура.Артикул) Тогда
		Если Списком Тогда
			Список.Добавить(Номенклатура.Артикул);
		Иначе
			Возврат СокрЛП(Номенклатура.Артикул);
		КонецЕсли;
	КонецЕсли;
	
	ЧастиСтроки = СтрЗаменить(СокрЛП(Номенклатура.Наименование), " ", Символы.ПС);
	
	Для й=-СтрЧислоСтрок(ЧастиСтроки) По -1 Цикл
		
		Строка = СтрПолучитьСтроку(ЧастиСтроки, -й);
		Если ВСтрокеЕстьЦифры(Строка) Тогда
			Если Списком Тогда
				Список.Добавить(Строка);
			Иначе
				Возврат Строка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция НайтиНоменклатуруПоСтроке(Знач СтрокаПоиска)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Наименование,
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование ПОДОБНО &СтрокаПоиска КАК НайденоПоНаименованию,
	|	Номенклатура.Артикул ПОДОБНО &СтрокаПоиска КАК НайденоПоАртикулу,
	|	Номенклатура.Код ПОДОБНО &СтрокаПоиска КАК НайденоПоКоду,
	|	ВЫБОР
	|		КОГДА Номенклатура.Код ПОДОБНО &СтрокаПоиска
	|			ТОГДА Номенклатура.Код
	|		КОГДА Номенклатура.Артикул ПОДОБНО &СтрокаПоиска
	|			ТОГДА Номенклатура.Артикул
	|		КОГДА Номенклатура.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Номенклатура.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТекстСовпадения,
	|	Номенклатура.ЭтоЮралс
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ Номенклатура.Артикул ПОДОБНО &СтрокаПоиска
	|			ИЛИ Номенклатура.Код ПОДОБНО &СтрокаПоиска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ЭтоЮралс УБЫВ"
	);
	
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+СтрЗаменить(СтрокаПоиска," ", "%")+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ПолучитьПредполагаемыйКаталожныйНомер(Номенклатура, Знач Текст)
	
	Список = Новый Массив;
	Номера = ПолучитьКаталожныйНомер(Номенклатура, Истина);
	
	Строки = СтрЗаменить(СокрЛП(Текст), " ", Символы.ПС);
	Для й=1 По СтрЧислоСтрок(Строки) Цикл
		
		СтрокаПоиска = СтрПолучитьСтроку(Строки, й);
		
		Для Каждого Элемент Из Номера Цикл
			Если Найти(ВРЕГ(Элемент.Значение), ВРЕГ(СтрокаПоиска))>0 Тогда
				Список.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из Список Цикл
		Если ВСтрокеЕстьЦифры(Строка) Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьКонецСтроки(Строка, Префикс)
	
	Позиция = Найти(ВРЕГ(Строка), ВРЕГ(Префикс));
	Если Позиция = 0 Тогда
		Возврат Префикс;
	Иначе
		Возврат Сред(Строка, Позиция);
	КонецЕсли;
	
КонецФункции

#КонецОбласти //ВспомогательныеПоискаПоКаталожномуНомеру

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыПродолжение

&НаСервере
Процедура ОстатокЕдиногоСкладаНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОстатокЕдиногоСклада(Команда)
	ОстатокЕдиногоСкладаНаСервере();
КонецПроцедуры
