
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПросмотр = Объект.Проведен И (Лев(ИмяПользователя(), 2) <> "1С");
	
	Если Не ТолькоПросмотр Тогда
		
		Адрес = ПолучитьАдресПоставки();
		Если ПустаяСтрока(Объект.АдресПоставки) Тогда
			Объект.АдресПоставки = Адрес;
		КонецЕсли;
		
		Список = Элементы.СрокПоставки.СписокВыбора;
		Список.Добавить(НачалоДня(ТекущаяДата()), "Сегодня"    );
		Список.Добавить(Список[0].Значение+86400, "Завтра"     );
		Список.Добавить(Список[1].Значение+86400, "Послезавтра");
		Список.Добавить(Список[1].Значение+86400, "--------------------");
		Список.Добавить(Список[2].Значение+86400, "Кровавое суперлуние");
		Список.Добавить(Список[3].Значение+86400, "Как рак на горе свиснет");
		Список.Добавить(Неопределено            , "!!! ВЧЕРА !!!");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы="Товары")
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы="Товары")
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Количество");
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	КоличествоСтрок = Элементы.Товары.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрок = ВставитьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	//ПараметрыОбъекта = Неопределено;
	//ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);

	//ДобавленныеСтроки = РеализацияТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтотОбъект, ВыбранноеЗначение, ИмяТаблицы);
	//
	//СписокСчетов = Новый Массив;
	//Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНаОплатуПокупателю) Тогда
	//		СписокСчетов.Добавить(СтрокаТаблицы.СчетНаОплатуПокупателю);
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетов, "Номер, Дата");
	//
	//Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
	//	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтотОбъект, СтрокаТаблицы, РеквизитыСчетовНаОплату, ПараметрыОбъекта);
	//КонецЦикла;
	//
	//ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(ДобавленныеСтроки.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетМаркируемойПродукцииИСМП);
	//
	//РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
	//
	//РеализацияТоваровУслугФормы.ПриДобавленииСчетов(ЭтотОбъект, СписокСчетов);
	//
	//ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // КопированиеВставкаСтрокЧерезБуферОбмена

#Область АдресПоставки

&НаСервере
Функция ПолучитьАдресПоставки()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки КАК Представление,
	|	СУММА(1) КАК Приоритет,
	|	1 КАК Порядок
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.Организация = &Организация
	|	И Заявка.Ссылка <> &Ссылка
	|	И Заявка.АдресПоставки <> """"
	|	И Заявка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&АдресПоставки,
	|	""──────────────────────────────────────────────────"",
	|	0,
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки,
	|	СУММА(1),
	|	3
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.Организация = &Организация
	|	И Заявка.Ссылка <> &Ссылка
	|	И Заявка.АдресПоставки <> """"
	|	И Заявка.Ответственный <> &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявка.АдресПоставки,
	|	Заявка.АдресПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Приоритет УБЫВ"
	);
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("АдресПоставки", Объект.АдресПоставки);
	
	Список = Элементы.АдресПоставки.СписокВыбора;
	Список.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.АдресПоставки, Выборка.Представление);
	КонецЦикла;
	
	Возврат ?(Список.Количество()>0, Список[0].Значение, "");
	
КонецФункции

&НаКлиенте
Процедура АдресПоставкиПриИзменении(Элемент)
	
	ПолучитьАдресПоставки();
	
КонецПроцедуры

#КонецОбласти // АдресПоставки

&НаКлиенте
Процедура СрокПоставкиПриИзменении(Элемент)
	
	Объект.СрокПоставки = Макс(Объект.СрокПоставки, ТекущаяДата());
	
КонецПроцедуры

#Область ВспомогательныеФункции

&НаСервереБезКонтекста
Функция НайтиНоменклатуруПоКоду(КодПоиска)
	
	Возврат Справочники.Номенклатура.НайтиПоКоду(КодПоиска);
	
КонецФункции

#КонецОбласти // ВспомогательныеФункции

#Область ВспомогательныеПоискаПоКаталожномуНомеру

// Функция проверяет наличие в строке цифр
//
// Параметры
//  СтрокаПроверки - Строка для проверки наличия цифр
// Возвращаемое значение:
//   Булево
//
Функция ВСтрокеЕстьЦифры(Знач СтрокаПроверки)
	
	Для й = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, й, 1));
		Если (48 <= КодСимвола И КодСимвола <= 57) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ВСтрокеЕстьЦифры

Функция ПолучитьКаталожныйНомер(Номенклатура, Списком=Ложь)
	
	Если Списком Тогда
		Список = Новый СписокЗначений;
	ИначеЕсли Номенклатура.СтатьяЗатрат.Код <> "2.4.1" Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Номенклатура.Артикул) Тогда
		Если Списком Тогда
			Список.Добавить(Номенклатура.Артикул);
		Иначе
			Возврат СокрЛП(Номенклатура.Артикул);
		КонецЕсли;
	КонецЕсли;
	
	ЧастиСтроки = СтрЗаменить(СокрЛП(Номенклатура.Наименование), " ", Символы.ПС);
	
	Для й=-СтрЧислоСтрок(ЧастиСтроки) По -1 Цикл
		
		Строка = СтрПолучитьСтроку(ЧастиСтроки, -й);
		Если ВСтрокеЕстьЦифры(Строка) Тогда
			Если Списком Тогда
				Список.Добавить(Строка);
			Иначе
				Возврат Строка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция НайтиНоменклатуруПоСтроке(Знач СтрокаПоиска)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Наименование,
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование ПОДОБНО &СтрокаПоиска КАК НайденоПоНаименованию,
	|	Номенклатура.Артикул ПОДОБНО &СтрокаПоиска КАК НайденоПоАртикулу,
	|	Номенклатура.Код ПОДОБНО &СтрокаПоиска КАК НайденоПоКоду,
	|	ВЫБОР
	|		КОГДА Номенклатура.Код ПОДОБНО &СтрокаПоиска
	|			ТОГДА Номенклатура.Код
	|		КОГДА Номенклатура.Артикул ПОДОБНО &СтрокаПоиска
	|			ТОГДА Номенклатура.Артикул
	|		КОГДА Номенклатура.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Номенклатура.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТекстСовпадения,
	|	Номенклатура.ЭтоЮралс
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ Номенклатура.Артикул ПОДОБНО &СтрокаПоиска
	|			ИЛИ Номенклатура.Код ПОДОБНО &СтрокаПоиска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ЭтоЮралс УБЫВ"
	);
	
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+СтрЗаменить(СтрокаПоиска," ", "%")+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ПолучитьПредполагаемыйКаталожныйНомер(Номенклатура, Знач Текст)
	
	Список = Новый Массив;
	Номера = ПолучитьКаталожныйНомер(Номенклатура, Истина);
	
	Строки = СтрЗаменить(СокрЛП(Текст), " ", Символы.ПС);
	Для й=1 По СтрЧислоСтрок(Строки) Цикл
		
		СтрокаПоиска = СтрПолучитьСтроку(Строки, й);
		
		Для Каждого Элемент Из Номера Цикл
			Если Найти(ВРЕГ(Элемент.Значение), ВРЕГ(СтрокаПоиска))>0 Тогда
				Список.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из Список Цикл
		Если ВСтрокеЕстьЦифры(Строка) Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьКонецСтроки(Строка, Префикс)
	
	Позиция = Найти(ВРЕГ(Строка), ВРЕГ(Префикс));
	Если Позиция = 0 Тогда
		Возврат Префикс;
	Иначе
		Возврат Сред(Строка, Позиция);
	КонецЕсли;
	
КонецФункции

#КонецОбласти //ВспомогательныеПоискаПоКаталожномуНомеру

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураКодПриИзменении(Элемент)
	
	НайденныйЭлемент = НайтиНоменклатуруПоКоду(СокрЛП(Элемент.Значение));
	
	Если НайденныйЭлемент.ПометкаУдаления Тогда
		Сообщить("Элемент помечен на удаление!"+Символы.ПС+"Введите другой код");
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = НайденныйЭлемент;
	ПриИзмененииНоменклатурыТовары();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдиницаИзмеренияНоменклатуры(Номенклатура)
	
	Возврат Номенклатура.ЕдиницаИзмерения;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаИзмеренияНоменклатуры(ТекущиеДанные.Номенклатура);
	
	Если ПустаяСтрока(ТекущиеДанные.Артикул) Тогда
		ТекущиеДанные.Артикул = ПолучитьКаталожныйНомер(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииНоменклатурыТовары()

КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

#Область Артикул

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураАртикулНачалоВыбораНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАртикулНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТоварыНоменклатураАртикулНачалоВыбораНаСервере();
КонецПроцедуры

#КонецОбласти // Артикул

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТовары
