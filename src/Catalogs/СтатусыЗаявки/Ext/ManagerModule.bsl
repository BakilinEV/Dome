
Функция СтатусПоКоду(Код) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыЗаявки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыЗаявки КАК СтатусыЗаявки
	|ГДЕ
	|	СтатусыЗаявки.Код = "+Код
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.СтатусыЗаявки.ПустаяСсылка();
	
КонецФункции

Функция СтатусОтмена() Экспорт
	
	Возврат Справочники.СтатусыЗаявки.НайтиПоКоду("000");
	
КонецФункции

Функция СтатусНачало() Экспорт
	
	Возврат Справочники.СтатусыЗаявки.НайтиПоКоду("001");
	
КонецФункции

Функция СтатусФиниша() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыЗаявки.Следующий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыЗаявки КАК СтатусыЗаявки
	|ГДЕ
	|	СтатусыЗаявки.Следующий.Следующий = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявки.ПустаяСсылка)
	|	И ""000"" < СтатусыЗаявки.Следующий.Код
	|	И СтатусыЗаявки.Следующий.Код < ""900"""
	);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.СтатусыЗаявки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция СтатусЗакрыт(ПолностьюЗакрыт=Истина) Экспорт
	
	Возврат Справочники.СтатусыЗаявки.НайтиПоКоду(?(ПолностьюЗакрыт, "999", "900"));
	
КонецФункции

Функция ПроверитьДоступСтатуса(Статус, Пользователь=Неопределено, Ответственный=Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Статус = СтатусНачало() И Ответственный <> Неопределено Тогда	//-= при формировании документа
		Возврат Пользователь = Ответственный;									//-= может редактировать ТОЛЬКО ответственный
	КонецЕсли;
	
	Данные = глОбщий.ПолучитьСотрудникаПоФизЛицу(Пользователь.ФизЛицо, ТекущаяДата());
	
	Должность = Данные.Должность;
	Подразделение = Данные.ПодразделениеОрганизации;		
	
	ЕстьДоступ = Ложь;
	
	Если Статус.КадровыеДанные.Количество() = 0 И Статус.Пользователи.Количество()=0 Тогда
		ЕстьДоступ = Истина;
	КонецЕсли;
	
	Если Не ЕстьДоступ И Статус.Пользователи.Количество()>0 Или Статус.Пользователи.Найти(Пользователь, "Пользователь") <> Неопределено Тогда
		ЕстьДоступ = Истина;
	КонецЕсли;
	
	Если Не ЕстьДоступ Тогда
		ПараметрыОтбора = Новый Структура("Должность, Подразделение", Должность, Подразделение);
		ЕстьДоступ = (Статус.КадровыеДанные.НайтиСтроки(ПараметрыОтбора).Количество()>0);
	КонецЕсли;
	
	Если Не ЕстьДоступ Тогда
		ПараметрыОтбора = Новый Структура("Должность, Подразделение", Справочники.ДолжностиОрганизаций.ПустаяСсылка(), Подразделение);
		ЕстьДоступ = (Статус.КадровыеДанные.НайтиСтроки(ПараметрыОтбора).Количество()>0);
	КонецЕсли;
		
	Если Не ЕстьДоступ Тогда
		ПараметрыОтбора = Новый Структура("Должность, Подразделение", Должность, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		ЕстьДоступ = (Статус.КадровыеДанные.НайтиСтроки(ПараметрыОтбора).Количество()>0);
	КонецЕсли;
	
	Возврат ЕстьДоступ;
	
КонецФункции

Функция ПолучитьСтруктуруСвойствКнопки(Кнопка="") Экспорт 
	
	Свойства = Новый Структура;
	Свойства.Вставить("Заголовок"        , ""                               );
	Свойства.Вставить("Видимость"        , Ложь                             );
	Свойства.Вставить("Картинка"         , Новый Картинка                   );
	Свойства.Вставить("Отображение"      , ОтображениеКнопки.КартинкаИТекст );
	Свойства.Вставить("ЦветФона"         , Новый Цвет                       );
	Свойства.Вставить("ЦветТекста"       , Новый Цвет                       );
	Свойства.Вставить("ЦветРамки"        , Новый Цвет                       );
	Свойства.Вставить("Шрифт"            , ШрифтыСтиля.ОбычныйШрифтТекста   );
	Свойства.Вставить("Фигура"           , ФигураКнопки.Авто                );
	Свойства.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Авто     );
	Свойства.Вставить("ПоложениеКартинки", ПоложениеКартинкиКнопкиФормы.Авто);
	
	Если Кнопка = "КнопкаСледующий" Тогда
		
		Свойства.Вставить("Картинка"  , БиблиотекаКартинок.ОформлениеЗнакФлажок);
		Свойства.Вставить("ЦветФона"  , Новый Цвет(220, 255, 220));
		Свойства.Вставить("ЦветТекста", WebЦвета.Зеленый);
		Свойства.Вставить("ЦветРамки" , WebЦвета.Зеленый);
		
	ИначеЕсли Кнопка = "КнопкаАльтернативный" Тогда
		
		Свойства.Вставить("Картинка"  , БиблиотекаКартинок.ОформлениеКругЗаполненный);
		Свойства.Вставить("ЦветФона"  , Новый Цвет(204, 255, 255));
		Свойства.Вставить("ЦветТекста", Новый Цвет(0, 51, 102));
		Свойства.Вставить("ЦветРамки" , Новый Цвет(0, 51, 102));
		
	ИначеЕсли Кнопка = "КнопкаОтмены" Тогда
		
		Свойства.Вставить("Картинка"  , БиблиотекаКартинок.ОформлениеЗнакКрест);
		Свойства.Вставить("ЦветФона"  , WebЦвета.ТусклоРозовый);
		Свойства.Вставить("ЦветТекста", WebЦвета.Малиновый);
		Свойства.Вставить("ЦветРамки" , WebЦвета.Малиновый);
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция ПолучитьСвойстваКнопки(Статус, ИмяКнопки="КнопкаСледующий") Экспорт
	
	Параметры = ПолучитьСтруктуруСвойствКнопки(ИмяКнопки);
	
	Оформление = Статус.Оформление.Получить();
	Если Оформление.Свойство(ИмяКнопки) Тогда
		Оформление.Свойство(ИмяКнопки, Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

#Область Инициализация

Функция ЕстьЭтапыЗаявки() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыЗаявки.Код КАК Код
	|ИЗ
	|	Справочник.СтатусыЗаявки КАК СтатусыЗаявки"
	);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ИнициализироватьБазовыеЭтапы() Экспорт
	
	Если ЕстьЭтапыЗаявки() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтапыЗаявки = Новый Массив;
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "000", "Отменена"                                ,                            ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "001", "Формируется"                             , "Отправить в ОМТС"         ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "002", "Ожидается обработка ОМТС"                ,                            ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "003", "Расценка ОМТС"                           , "Отправить на согласование"));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "004", "Ожидается согласование главным инженером",                            ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "005", "На согласовании"                         , "Согласовать"              ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "006", "В работе ОМТС"                           , "Отправить менеджерам"     ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "900", "Частично закрыта"                        ,                            ));
	ЭтапыЗаявки.Добавить(Новый Структура("Код, Наименование, Заголовок", "999", "Закрыта"                                 ,                            ));
	
	Для Каждого ЭтапЗаявки Из ЭтапыЗаявки Цикл
		
		НовыйЭлемент = Справочники.СтатусыЗаявки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭтапЗаявки);
		НовыйЭлемент.Пользователи.Добавить();
		НовыйЭлемент.Записать();
		
	КонецЦикла;
	
	//-= устанавливаем связи перехода
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыЗаявки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыЗаявки КАК СтатусыЗаявки
	|ГДЕ
	|	НЕ СтатусыЗаявки.Код В (""000"", ""900"", ""999"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыЗаявки.Код УБЫВ"
	);
	
	Следующий = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Следующий <> Неопределено Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Следующий = Следующий;
			Объект.Записать();
		КонецЕсли;
		
		Следующий = Выборка.Ссылка;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти // Инициализация