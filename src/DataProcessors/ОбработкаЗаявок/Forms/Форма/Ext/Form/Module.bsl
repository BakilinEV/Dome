
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	КонтрагентЮралс = Справочники.Контрагенты.КонтрагентЮралс();
	
	Элементы.ОбщийСписокВсе.Видимость = Документы.Заявка.Пользователь1С();
	
	УстановитьДоступныеСтатусы();
	
	ЗаполнитьСтрокиВРаботе();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеСтатусы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыЗаявки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДоступныеСтатусы
	|ИЗ
	|	Справочник.СтатусыЗаявки КАК СтатусыЗаявки
	|ГДЕ
	|	СтатусыЗаявки.Код МЕЖДУ ""002"" И ""899""
	|	И СтатусыЗаявки.Пользователи.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗаявки.Ссылка КАК Ссылка
	|ИЗ
	|	ДоступныеСтатусы КАК ДоступныеСтатусы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыЗаявки КАК СтатусыЗаявки
	|		ПО (ДоступныеСтатусы.Ссылка В (СтатусыЗаявки.Следующий, СтатусыЗаявки.Следующий1, СтатусыЗаявки.Следующий2, СтатусыЗаявки.Следующий3))"
	);
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СтатусыДоступные.ЗагрузитьЗначения(РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СтатусыВОжидании.ЗагрузитьЗначения(РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Колонки = Новый СписокЗначений;
	Колонки.Добавить("НомерЗаявки");
	Колонки.Добавить("Дата");
	Колонки.Добавить("Ответственный");
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Количество");
	Колонки.Добавить("Цена");
	Колонки.Добавить("Сумма");
	Колонки.Добавить("ОсновноеСредство");
	Колонки.Добавить("Примечание");
	Колонки.Добавить("Комментарий");
	
	Для Каждого СтатусДоступный Из СтатусыДоступные Цикл
		
		СтатусЗаявки = СтатусДоступный.Значение;
		
		ЭлементГруппа = Элементы.Добавить("СтраницаОжидания"+СтатусЗаявки.Код, Тип("ГруппаФормы"), Элементы.ГруппаЖурналыВОжидании);
		ЭлементГруппа.Вид = ВидГруппыФормы.Страница;
		ЭлементГруппа.Заголовок = Строка(СтатусЗаявки);
		
		ЭлементТаблица = Элементы.Добавить("ТаблицаОжидания"+СтатусЗаявки.Код, Тип("ТаблицаФормы"), ЭлементГруппа);
		ЭлементТаблица.ПутьКДанным = "СтрокиВОжидании";
		ЭлементТаблица.АвтоОбновление = Истина;
		ЭлементТаблица.ПериодАвтоОбновления = 10;
		
		//Для Каждого Колонка Из СтатусЗаявки.Реквизиты Цикл
		//	ЭлементКолонка = Элементы.Добавить("Колонка"+Колонка.Имя+СтатусЗаявки.Код, Тип("ПолеФормы"), ЭлементТаблица);
		//	ЭлементКолонка.Вид = ВидПоляФормы.ПолеНадписи;
		//	ЭлементКолонка.ПутьКДанным = "СтрокиВОжидании."+Колонка.Имя;
		//КонецЦикла;
		
		Для Каждого Колонка Из Колонки Цикл
			ЭлементКолонка = Элементы.Добавить("Колонка"+Колонка.Значение+СтатусЗаявки.Код, Тип("ПолеФормы"), ЭлементТаблица);
			ЭлементКолонка.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементКолонка.ПутьКДанным = "СтрокиВОжидании."+Колонка.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСтатусОтбора(?(Элементы.ОбщийСписокВсе.Видимость, -1, 0));
	
	Если Не Элементы.ОбщийСписокВсе.Видимость Тогда
		//КоличествоВидимыхСтраниц = 0;
		//Для Каждого Страница Из Элементы.ГруппаЖурналыВОжидании.ПодчиненныеЭлементы Цикл
		//	КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц+Число(Страница.Видимость);
		//КонецЦикла;
		Если Элементы.ГруппаЖурналыВОжидании.ПодчиненныеЭлементы.Количество() = 1 Тогда
			Элементы.ГруппаЖурналыВОжидании.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиВРаботе(ТолькоЗаполнить=Истина, НомерЗаявки=Неопределено)
	
	УсловиеНомерЗаявки = Символы.ПС+"	И &НомерЗаявки В (ЗаявкаСтроки.НомерЗаявки, Неопределено)";
	
	ТекстЗапроса0 = СтрокиВОжидании.ТекстЗапроса;
	ТекстЗапроса1 = СтрокиВОжидании.ТекстЗапроса+УсловиеНомерЗаявки;
	
	Для й=0 По 3 Цикл
		ТекстЗапроса0 = СтрЗаменить(ТекстЗапроса0, ".Следующий"+Формат(й, "ЧН=' '; ЧГ=0"), " ");
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса0+ОбщегоНазначения.РазделительПакетаЗапросов()+ТекстЗапроса1);
	Для Каждого Элемент Из СтрокиВОжидании.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Элемент.Параметр, Элемент.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("НомерЗаявки", НомерЗаявки);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтрокиВРаботе.Загрузить(РезультатЗапроса[0].Выгрузить());
	
	СтрокиВРаботе.Сортировать("НомерЗаявки, Дата");
	
	Если ТолькоЗаполнить Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из РезультатЗапроса[1].Выгрузить() Цикл
		
		ЗаполнитьЗначенияСвойств(СтрокиВРаботе.Добавить(), СтрокаТаблицы);
		
		РегистрыСведений.ЗаявкаСтатусы.УстановитьСледующийСтатус(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы.Перечень);
		
	КонецЦикла;
	
	СтрокиВРаботе.Сортировать("НомерЗаявки, Дата");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНомеровЗаявки()
	
	Статус = Неопределено;
	Список = Новый СписокЗначений;
	
	Для Каждого Элемент Из СтатусыДоступные Цикл
		Если Элемент.Пометка Тогда
			Статус = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Статус = Неопределено Тогда
		Статус = СтатусыДоступные.ВыгрузитьЗначения();
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрокиВОжидании.ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", Статус);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Таблица = Результат.Выгрузить();
		Таблица.Свернуть("НомерЗаявки");
		
		Список.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("НомерЗаявки"));
		Если Список.Количество()>1 Тогда
			Список.СортироватьПоЗначению();
			Список.Вставить(0, Неопределено, "Все заявки");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура КомандаНачатьОбработку(Команда)
	
	СписокВыбора = ПолучитьСписокНомеровЗаявки(); //Прав(Элементы.ГруппаЖурналыВОжидании.ТекущаяСтраница.Имя, 3));
	
	Если СписокВыбора.Количество()=0 Тогда
		Возврат;
	ИначеЕсли СписокВыбора.Количество()>1 Тогда
		ОповещениеВыбора = Новый ОписаниеОповещения("КомандаНачатьОбработкуЗавершение", ЭтотОбъект);
		//ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВыбора, Элементы.ЯкорьВыпадающегоСписка);
		ПоказатьВыборИзМеню(ОповещениеВыбора, СписокВыбора, Элементы.ЯкорьВыпадающегоСписка);
	Иначе
		ЗаполнитьСтрокиВРаботе(Ложь, СписокВыбора[0].Значение);
		Элементы["ТаблицаОжидания"+Прав(Элементы.ГруппаЖурналыВОжидании.ТекущаяСтраница.Имя, 3)].Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНачатьОбработкуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент <> Неопределено Тогда
		ЗаполнитьСтрокиВРаботе(Ложь, ВыбранныйЭлемент.Значение);
		Элементы["ТаблицаОжидания"+Прав(Элементы.ГруппаЖурналыВОжидании.ТекущаяСтраница.Имя, 3)].Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьФлажки(Выбран)
	
	МассивСтрок = Элементы.СтрокиВРаботе.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество()=1 Тогда
		Для Каждого СтрокаЗаявки Из СтрокиВРаботе Цикл
			СтрокаЗаявки.Выбран = Выбран;
		КонецЦикла;
	Иначе
		Для Каждого Идентификатор Из МассивСтрок Цикл
			СтрокаЗаявки = СтрокиВРаботе.НайтиПоИдентификатору(Идентификатор);
			СтрокаЗаявки.Выбран = Выбран;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	КомандаИзменитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	КомандаИзменитьФлажки(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДействияСтатуса()
	
	Статус = Неопределено;
	
	Для Каждого Элемент Из СтатусыДоступные Цикл
		Если Элемент.Пометка Тогда
			Статус = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Действия = Новый Структура;
	
	Если Статус <> Неопределено Тогда
		Для Каждого СтрокаДействий Из Статус.Действия Цикл
			Действия.Вставить(СтрокаДействий.Действие, СтрокаДействий.Параметры);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЦены(СтрокаДанных)
	
	Если СтрокаДанных.Перечень <> 0
		И ЗначениеЗаполнено(СтрокаДанных.Цена)
		И ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
		
		Запись = РегистрыСведений.ЗаявкаЦены.СоздатьМенеджерЗаписи();
		Запись.Период              = ТекущаяДата();
		Запись.ИдентификаторСтроки = СтрокаДанных.ИдентификаторСтроки;
		Запись.Количество          = СтрокаДанных.Количество;
		Запись.Цена                = СтрокаДанных.Цена;
		Запись.Перечень            = СтрокаДанных.Перечень;
		Запись.Контрагент          = СтрокаДанных.Контрагент;
		Запись.Ответственный       = Пользователь;
		Запись.ИмяКомпьютера       = ИмяКомпьютера();
		
		Запись.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСогласование(СтрокаДанных, ВидСогласования="")
	
	Запись = РегистрыСведений["Заявка"+ВидСогласования].СоздатьМенеджерЗаписи();
	Запись.Период              = ТекущаяДата();
	Запись.ИдентификаторСтроки = СтрокаДанных.ИдентификаторСтроки;
	Запись.Согласовано         = Истина;
	Запись.Комментарий         = СтрокаДанных.Комментарий;
	Запись.Ответственный       = ПараметрыСеанса.ТекущийПользователь;
	Запись.ИмяКомпьютера       = ИмяКомпьютера();
	
	Запись.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатус(Направление="Следующий")
	
	ПараметрыОтбора = Новый Структура("Выбран", Истина);
	НайденныеСтроки = СтрокиВРаботе.НайтиСтроки(ПараметрыОтбора);
	
	Действия = ПолучитьДействияСтатуса();
	
	Для Каждого СтрокаЗаявки Из НайденныеСтроки Цикл
		
		СтатусИзменен = РегистрыСведений.ЗаявкаСтатусы.УстановитьСледующийСтатус(СтрокаЗаявки.ИдентификаторСтроки, СтрокаЗаявки.Перечень, СтрокаЗаявки.Комментарий, Направление);
		
		Если Не СтатусИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Направление = "Следующий" Тогда
		
			Если Действия.Свойство("УстановкаЦен") Тогда
				ЗаписатьЦены(СтрокаЗаявки);
			КонецЕсли;
			
			Если Действия.Свойство("Согласование") Тогда
				ЗаписатьСогласование(СтрокаЗаявки, "Цена");
				ЗаписатьСогласование(СтрокаЗаявки, "Закуп");
			КонецЕсли;
			
			Если Действия.Свойство("СогласованиеЦены") Тогда
				ЗаписатьСогласование(СтрокаЗаявки, "СогласованаЦена");
			КонецЕсли;
			
			Если Действия.Свойство("СогласованиеЗакупа") Тогда
				ЗаписатьСогласование(СтрокаЗаявки, "СогласованЗакуп");
			КонецЕсли;
			
		КонецЕсли;
			
		СтрокиВРаботе.Удалить(СтрокаЗаявки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСледующий(Команда)
	
	УстановитьСтатус("Следующий");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусАльтернативный(Команда)
	
	УстановитьСтатус("Альтернативный");
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтказатьНаСервере()
	
	ПараметрыОтбора = Новый Структура("Выбран", Истина);
	ПараметрыОтбора.Вставить("Комментарий", "");
	
	НайденныеСтроки = СтрокиВРаботе.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаЗаявки Из НайденныеСтроки Цикл
		
		ИндексСтроки = СтрокиВРаботе.Индекс(СтрокаЗаявки);
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнена колонка ""Комментарий"" в строке "+(ИндексСтроки+1);
		Сообщение.Поле  = "СтрокиВРаботе["+ИндексСтроки+"].Комментарий";
		Сообщение.УстановитьДанные("Объект");
		Сообщение.Сообщить();
		
	КонецЦикла;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	Иначе
		ПараметрыОтбора.Удалить("Комментарий");
	КонецЕсли;
	
	СтатусОтмены = Справочники.СтатусыЗаявки.СтатусОтмена();
	
	НайденныеСтроки = СтрокиВРаботе.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаЗаявки Из НайденныеСтроки Цикл
		
		Запись = РегистрыСведений.ЗаявкаОтмененные.СоздатьМенеджерЗаписи();
		Запись.Период              = ТекущаяДата();
		Запись.ИдентификаторСтроки = СтрокаЗаявки.ИдентификаторСтроки;
		Запись.Комментарий         = СтрокаЗаявки.Комментарий;
		Запись.Ответственный       = ПараметрыСеанса.ТекущийПользователь;
		Запись.ИмяКомпьютера       = ИмяКомпьютера();
		
		Запись.Записать();
		
		РегистрыСведений.ЗаявкаСтатусы.УстановитьСтатус(СтрокаЗаявки.ИдентификаторСтроки, СтатусОтмены, СтрокаЗаявки.Комментарий);
		
		СтрокиВРаботе.Удалить(СтрокаЗаявки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтказать(Команда)
	КомандаОтказатьНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаВернутьВОжиданиеНаСервере()
	
	ПараметрыОтбора = Новый Структура("Выбран", Истина);
	НайденныеСтроки = СтрокиВРаботе.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаЗаявки Из НайденныеСтроки Цикл
		
		РегистрыСведений.ЗаявкаСтатусы.УстановитьПредыдущийСтатус(СтрокаЗаявки.ИдентификаторСтроки);
		
		СтрокиВРаботе.Удалить(СтрокаЗаявки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернутьВОжидание(Команда)
	
	КомандаВернутьВОжиданиеНаСервере();
	Элементы["ТаблицаОжидания"+Прав(Элементы.ГруппаЖурналыВОжидании.ТекущаяСтраница.Имя, 3)].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПользователя() Экспорт
	
	ПоказатьОповещениеПользователя("КУПОЛ", "Бла-бла-бла", "Есть заявки требующие внимания", БиблиотекаКартинок.НапоминаниеРО, СтатусОповещенияПользователя.Важное);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьКомментарий(Команда)
	
	ПараметрыОтбора = Новый Структура("Выбран", Истина);
	НайденныеСтроки = СтрокиВРаботе.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаВРаботе Из НайденныеСтроки Цикл
		СтрокаВРаботе.Комментарий = ШаблонКомментария;
	КонецЦикла;
	
КонецПроцедуры

#Область ПереченьНомерклатуры

&НаСервере
Процедура КомандаУстановитьПереченьНаСервере(СтрокаДанных=Неопределено)
	
	Отбор = Неопределено;
	Если СтрокаДанных <> Неопределено Тогда
		Отбор = Новый Массив;
		Отбор.Добавить(СтрокаДанных);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ДопРеквизитыНоменклатуры.ЭтоЮралс, ЛОЖЬ)
	|			ТОГДА 3
	|		КОГДА НЕ ЗаявкаОферты.Номенклатура ЕСТЬ NULL
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Перечень
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкаПереченьОферт.СрезПоследних(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), ) КАК ЗаявкаОферты
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЗаявкаОферты.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопРеквизитыНоменклатуры КАК ДопРеквизитыНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = ДопРеквизитыНоменклатуры.Номенклатура"
	);
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаДанных", СтрокиВРаботе.Выгрузить(Отбор));
	
	ПереченьНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Если СтрокаДанных = Неопределено Тогда
		Для Каждого СтрокаТаблицы Из СтрокиВРаботе Цикл
			НайденнаяСтрока = ПереченьНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			СтрокаТаблицы.Перечень = ?(НайденнаяСтрока=Неопределено, 0, НайденнаяСтрока.Перечень);
		КонецЦикла;
	Иначе
		СтрокаДанных.Перечень = ПереченьНоменклатуры[0].Перечень;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПеречень(Команда)
	КомандаУстановитьПереченьНаСервере();
КонецПроцедуры

#КонецОбласти // ПереченьНомерклатуры

#Область ЦеныНоменклатуры

&НаСервере
Процедура ЗаполнитьЦеныНаСервере(СтрокаДанных, Список=Неопределено)
	
	Если СтрокаДанных.Перечень = 0 Тогда
		КомандаУстановитьПереченьНаСервере(СтрокаДанных);
	КонецЕсли;
	
	ТаблицаЦен = Неопределено;
	
	Если СтрокаДанных.Перечень = 1 Тогда
		
		ПараметрыAPI = Новый Структура("Номенклатура", СтрокаДанных.Номенклатура);
		РезультатAPI = ОбменAPI.ПолучитьДанныеAPI(, "LASTPRICE", ПараметрыAPI);
		
		Если ТипЗнч(РезультатAPI) = Тип("Строка") Тогда
			
			Сообщить("Ошибка получения данных Юралс: "+РезультатAPI);
			
		ИначеЕсли ТипЗнч(РезультатAPI) = Тип("ТаблицаЗначений") Тогда
			
			ТаблицаЦен = РезультатAPI.Скопировать();
			ТаблицаЦен.Колонки.Добавить("Контрагент");
			ТаблицаЦен.ЗаполнитьЗначения(КонтрагентЮралс, "Контрагент");
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДанных.Перечень = 2 Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗаявкаПереченьОферт.Номенклатура,
			|	ЗаявкаПереченьОферт.ЦенаБезНДС КАК Цена,
			|	ЕСТЬNULL(Контрагенты.Ссылка, ВЫРАЗИТЬ(ЗаявкаПереченьОферт.КонтрагентНаименование КАК СТРОКА(100))) КАК Контрагент
			|ИЗ
			|	РегистрСведений.ЗаявкаПереченьОферт.СрезПоследних(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), Номенклатура В(&Номенклатура)) КАК ЗаявкаПереченьОферт
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ЗаявкаПереченьОферт.КонтрагентИНН = Контрагенты.ИНН
			|			И (НЕ Контрагенты.ПометкаУдаления)
			|УПОРЯДОЧИТЬ ПО
			|	Цена"
			);
			
			Запрос.УстановитьПараметр("Период", ТекущаяДата());
			Запрос.УстановитьПараметр("Номенклатура", СтрокаДанных.Номенклатура);
			
		ИначеЕсли СтрокаДанных.Перечень = 3 Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаявкаТендер.Номенклатура,
			|	ЗаявкаТендер.Период,
			|	ЗаявкаТендер.Цена,
			|	ЗаявкаТендер.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ РезультатТендера
			|ИЗ
			|	РегистрСведений.ЗаявкаТендер КАК ЗаявкаТендер
			|ГДЕ
			|	ЗаявкаТендер.ИдентификаторСтроки В(&ИдентификаторСтроки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатТендера.Номенклатура,
			|	РезультатТендера.Период,
			|	РезультатТендера.Цена,
			|	РезультатТендера.Контрагент,
			|	ИСТИНА КАК Тендер
			|ИЗ
			|	РезультатТендера КАК РезультатТендера
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 5
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
			|	МАКСИМУМ(ХозрасчетныйОборотыДтКт.Период),
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотДт = 0
			|			ТОГДА ХозрасчетныйОборотыДтКт.СуммаНУОборотДт
			|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СуммаНУОборотДт / ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК ЧИСЛО(15, 2))
			|	КОНЕЦ,
			|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, -6), МЕСЯЦ),
			|			,
			|			Регистратор,
			|			СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы)),
			|			,
			|			СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)),
			|			,
			|			СубконтоДт1 В (&Номенклатура)
			|				И ВЫБОР
			|					КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ СубконтоДт3 = &Склад
			|				КОНЕЦ) КАК ХозрасчетныйОборотыДтКт
			|		ЛЕВОЕ СОЕДИНЕНИЕ РезультатТендера КАК РезультатТендера
			|		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = РезультатТендера.Номенклатура
			|ГДЕ
			|	РезультатТендера.Цена ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
			|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
			|	ВЫБОР
			|		КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотДт = 0
			|			ТОГДА ХозрасчетныйОборотыДтКт.СуммаНУОборотДт
			|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СуммаНУОборотДт / ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК ЧИСЛО(15, 2))
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	РезультатТендера.Период УБЫВ"
			);
			
			Запрос.УстановитьПараметр("ИдентификаторСтроки", СтрокиВРаботе.Выгрузить(Новый Структура("Номенклатура", СтрокаДанных.Номенклатура), "ИдентификаторСтроки").ВыгрузитьКолонку("ИдентификаторСтроки"));
			Запрос.УстановитьПараметр("Склад" , БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад"));
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("Номенклатура", СтрокаДанных.Номенклатура);
		
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ТаблицаЦен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаЦен Цикл
			СтруктураВозврата = Новый Структура("Цена, Контрагент", СтрокаТаблицы.Цена, СтрокаТаблицы.Контрагент);
			Список.Добавить(СтруктураВозврата, ""+Формат(СтрокаТаблицы.Цена, "ЧДЦ=2")+                                                                        // цена
												 ?(СтрокаДанных.Перечень=3 И СтрокаТаблицы.Тендер, " т ", " - ")+                                             // разделитель
												 СокрЛП(СтрокаТаблицы.Контрагент)+                                                                            // контрагент
												 ?(СтрокаДанных.Перечень=3 И Не СтрокаТаблицы.Тендер, Формат(СтрокаТаблицы.Период, "ДФ=' [dd.MM.yy]'"), "")); // дата последней покупки
		КонецЦикла;
		
	ИначеЕсли ТаблицаЦен.Количество() > 0 Тогда
		
		СтрокаДанных.Цена = ТаблицаЦен[0].Цена;
		СтрокаДанных.Сумма = СтрокаДанных.Цена*СтрокаДанных.Количество;
		СтрокаДанных.Контрагент = ТаблицаЦен[0].Контрагент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьЦеныНаСервере()
	
	Для Каждого СтрокаДанных Из СтрокиВРаботе Цикл
		
		//Если СтрокаДанных.Перечень = 0 Тогда
		//	КомандаУстановитьПереченьНаСервере(СтрокаДанных);
		//КонецЕсли;
		
		ЗаполнитьЦеныНаСервере(СтрокаДанных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьЦены(Команда)
	КомандаУстановитьЦеныНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтрокиДляСогласованияЦенаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

#КонецОбласти // ЦеныНоменклатуры

&НаСервере
Процедура УстановитьСтатусОтбора(ИндексСтатуса=-1)
	
	//СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	//СвойстваСписка.ОсновнаяТаблица = "Справочник.Номенклатура";
	//СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	//СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	//ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	Для Каждого Элемент Из СтатусыДоступные Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
	
	Если ИндексСтатуса = -1 Тогда
		Статус = СтатусыДоступные.ВыгрузитьЗначения();
		Заголовок = "";
		Команды.УстановитьСтатусСледующий.Заголовок = "Выполнить";
	Иначе
		
		Элемент = СтатусыДоступные.Получить(ИндексСтатуса);
		Элемент.Пометка = Истина;
		
		Статус = Элемент.Значение;
		
		Заголовок = Строка(Статус);
		
		ЗаполнитьЗначенияСвойств(Элементы.КнопкиСледующий, Справочники.СтатусыЗаявки.ПолучитьСвойстваКнопки(Статус, "КнопкаСледующий"));
		ЗаполнитьЗначенияСвойств(Элементы.СтрокиВРаботеКонтекстноеМенюУстановитьСтатусСледующий, Элементы.КнопкиСледующий);
		
		ЗаполнитьЗначенияСвойств(Элементы.КнопкиАльтернативный, Справочники.СтатусыЗаявки.ПолучитьСвойстваКнопки(Статус, "КнопкаАльтернативный"));
		ЗаполнитьЗначенияСвойств(Элементы.СтрокиВРаботеКонтекстноеМенюУстановитьСтатусАльтернативный, Элементы.КнопкиАльтернативный);
		
		ЗаполнитьЗначенияСвойств(Элементы.КнопкиОтказать, Справочники.СтатусыЗаявки.ПолучитьСвойстваКнопки(Статус, "КнопкаОтмены"));
		ЗаполнитьЗначенияСвойств(Элементы.СтрокиВРаботеКонтекстноеМенюУстановитьСтатусОтказать, Элементы.КнопкиОтказать);
		
	КонецЕсли;
	
	СтрокиВОжидании.Параметры.УстановитьЗначениеПараметра("Статус", Статус);
	СтрокиОбработанные.Параметры.УстановитьЗначениеПараметра("Статус", Статус);
	
	ЗаполнитьСтрокиВРаботе();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЖурналыВОжиданииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьСтатусОтбора(Элемент.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница)-1);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиДляСогласованияКоличествоЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "СтрокиВРаботе");
	
КонецПроцедуры

#Область УстановитьМенеджера

&НаКлиенте
Процедура КомандаУстановитьМенеджера(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаУстановитьМенеджераЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, Менеджер, "Укажите менеджера");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьМенеджераЗавершение(ВыбранныйМенеджер, Параметры) Экспорт

	Если ВыбранныйМенеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Менеджер = ВыбранныйМенеджер;
	
	ПараметрыОтбора = Новый Структура("Выбран", Истина);
	НайденныеСтроки = СтрокиВРаботе.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаЗаявки Из НайденныеСтроки Цикл
		СтрокаЗаявки.Менеджер = Менеджер;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // УстановитьМенеджера

&НаСервереБезКонтекста
Функция ДокументЗаявки(НомерЗаявки)
	
	Возврат Документы.Заявка.НайтиПоНомеру(НомерЗаявки);
	
КонецФункции

&НаКлиенте
Процедура СтрокиВРаботеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СтрокиВРаботеНомерЗаявки Тогда
		ПоказатьЗначение(, ДокументЗаявки(Элемент.ТекущиеДанные.НомерЗаявки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтрокиВРаботеПриНачалеРедактированияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СтрокиВРаботеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокиВРаботеПриНачалеРедактированияНаСервере();
	
	СписокВыбора = Элементы.СтрокиВРаботеЦена.СписокВыбора;
	//ЗаполнитьЦеныНаСервере(СтрокиВРаботе.НайтиПоИдентификатору(Элемент.ТекущаяСтрока), СписокВыбора);
	
КонецПроцедуры
