#Область ПроцедурыВзаимодействияПоПротоколуHTTP

Функция ПолучитьHTTPСоединение(Параметры=Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьПараметрыHTTPСоединенияAzure();
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(Параметры.Сервер, Параметры.Порт,
								 Параметры.Логин, Параметры.Пароль,
								 Параметры.Прокси, Параметры.Таймаут,
								 Параметры.ЗащищенноеСоединение,
								 Параметры.ИспользоватьАутентификациюОС);
	
КонецФункции

Функция ПолучитьПараметрыHTTPСоединенияUrals() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Сервер" , "192.168.40.9");							// сервер (хост)
	Параметры.Вставить("Порт"   , 80);										// порт, по умолчанию для http используется 80, для https 443
	Параметры.Вставить("Логин"  , "Serv");									// пользователь для доступа к серверу (если он есть)
	Параметры.Вставить("Пароль" , "SERVgfhjkm");							// пароль для доступа к серверу (если он есть)
	Параметры.Вставить("Прокси" , Неопределено);							// здесь указывается прокси, если он есть
	Параметры.Вставить("Таймаут", 0);										// таймаут в секундах, 0 или пусто - не устанавливать
	Параметры.Вставить("ЗащищенноеСоединение", Неопределено);				// защищенное соединение, если используется https
	Параметры.Вставить("ИспользоватьАутентификациюОС", Ложь);               // включает использование аутентификации NTLM или Negotiate на сервере
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметрыHTTPСоединенияAzure() Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("Сервер" , "azure1c.westeurope.cloudapp.azure.com");	// сервер (хост)
	Параметры.Вставить("Порт"   , 80);										// порт, по умолчанию для http используется 80, для https 443
	Параметры.Вставить("Логин"  , "");										// пользователь для доступа к серверу (если он есть)
	Параметры.Вставить("Пароль" , "");										// пароль для доступа к серверу (если он есть)
	Параметры.Вставить("Прокси" , Неопределено);							// здесь указывается прокси, если он есть
	Параметры.Вставить("Таймаут", 0);										// таймаут в секундах, 0 или пусто - не устанавливать
	Параметры.Вставить("ЗащищенноеСоединение", Неопределено);				// защищенное соединение, если используется https
	Параметры.Вставить("ИспользоватьАутентификациюОС", Ложь);               // включает использование аутентификации NTLM или Negotiate на сервере
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьHTTPЗапрос(АдресРесурса, Параметры) Экспорт 
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки["Content-Type"] = "text/xml;charset=UTF-8";
	
	Если Параметры <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(XMLСтрока(Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(5))), КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат HTTPЗапрос;
	
КонецФункции

Функция ПолучитьДанныеAPI(АдресРесурса="/Urals_BUH/hs/invAPI/", Метод, Параметры=Неопределено) Экспорт 
	
	ПараметрыСоединения = ?(Найти(нрег(АдресРесурса), "urals")>0, ПолучитьПараметрыHTTPСоединенияUrals(), ПолучитьПараметрыHTTPСоединенияAzure());
	
	Попытка
		Соединение = ПолучитьHTTPСоединение(ПараметрыСоединения);
	Исключение
		ТекстСообщения = "Не удалось установить соединение с сервером :"+Символы.ПС+ИнформацияОбОшибке().Описание;
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат ТекстСообщения;
	КонецПопытки;
	
	HTTPОтвет = Соединение.ОтправитьДляОбработки(ПолучитьHTTPЗапрос(АдресРесурса+Метод, Параметры));
	
	Если HTTPОтвет.КодСостояния = 200 Тогда 
		Возврат XMLЗначение(Тип("ХранилищеЗначения"), HTTPОтвет.ПолучитьТелоКакСтроку()).Получить();
	КонецЕсли;
	
	Возврат "Ошибка отправки: "+HTTPОтвет.КодСостояния+Символы.ПС+HTTPОтвет.ПолучитьТелоКакСтроку();
	
КонецФункции

#КонецОбласти // ПроцедурыВзаимодействияПоПротоколуHTTP
